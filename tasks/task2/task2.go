package main

import (
	"fmt"
	"sync"
)

/*
Написать программу, которая конкурентно рассчитает значение квадратов чисел взятых из массива (2,4,6,8,10) и выведет их квадраты в stdout.

Поскольку порядок вывода в консоль нам не важен, то можно просто запустить N горутин, каждой передавать число из массива, она будет возводить его в степень и печатать.
Однако, нам надо как-то дождаться выполнения всех горутин, для этого я использовал waitGroup, которую предварительно инкрементируем на число, равное числу элементов в массиве, а потом ждем
когда каждая из горутин декрементирует это значение. Когда оно будет = 0, то значит, мы дождались всех горутин и можно идти дальше

*/

func Pow(a int, wg *sync.WaitGroup) {
	defer wg.Done()
	fmt.Println(a * a)
}

func main() {
	data := []int{2, 4, 6, 8, 10}

	wg := &sync.WaitGroup{}
	wg.Add(len(data))
	for _, v := range data {
		go Pow(v, wg)
	}
	wg.Wait()
}
